
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "MATH4753PK1"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "MATH4753PK1-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('MATH4753PK1')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("myboot2")
> ### * myboot2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: myboot2
> ### Title: Bootstrap Function for Calculating Intervals
> ### Aliases: myboot2
> 
> ### ** Examples
> 
> set.seed(10); sam=rbeta(20,shape1=3,shape2=4)
> myboot2(x=sam,alpha=.09,iter=10000)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("myboot2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mychisim")
> ### * mychisim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mychisim
> ### Title: mychisim
> ### Aliases: mychisim
> 
> ### ** Examples
> 
> mychisim(10,4,10,1000)
$w
   [1]  7.5988233  9.7546749 15.8325569  8.9074291  9.7487145  8.6149084
   [7] 11.6783446 13.2531963 17.6295172  5.6120915 10.0307841  7.7437048
  [13]  4.6346349 14.4709133  8.7884195  3.8264500  8.0297808 23.9169497
  [19]  5.2665236  9.7130790  4.5266292  7.1465581  9.2315915 11.4193497
  [25]  7.9527311  4.8466041 10.5204274  9.3757046  7.3987460  7.5829503
  [31]  9.5926335 10.4058127  9.5843613  2.4355884  7.4780854  5.3124475
  [37]  5.4271706  8.9821956  9.8706345  4.9113566  3.5214362  3.2393019
  [43] 11.3771622 11.4076126  9.8025225  9.1598182  7.8879574 10.9774537
  [49] 15.5407419  9.9565672  8.0288252 11.3310513 11.7584364  8.8057967
  [55] 14.7188949 10.7580498 11.9538259 10.1826692  7.7992659 17.3822784
  [61] 17.2942849  6.0539939  5.8843946  1.7949394 10.1060972  6.8842099
  [67] 14.0596250 11.9667621  9.3703289  6.1438710  7.2592923  8.0478530
  [73]  4.4020507  6.5364762  7.6606005  8.6430344  8.9727218 12.1941452
  [79]  5.0171547  7.1003873  3.2504521  9.3921225  8.3424862  9.8313397
  [85]  8.8013271  8.7599114  4.7964371  7.9376945  2.9305855  6.9337843
  [91] 10.2557408  5.5693534 11.2128304  2.1449909  9.5650016  9.9854769
  [97] 11.1782367  7.7720284  6.3308864  5.9612950  6.0165601 12.8924036
 [103] 15.3727057  3.2450345  0.7291842  7.6074032 12.0563641 17.5245095
 [109]  5.4496821 13.4510735  3.1194960  5.0016744  4.9311227  5.8050699
 [115]  9.0132607  6.7209370 12.1918733  4.8944684  1.4244885 14.4944248
 [121]  4.8119995  5.3497579 10.6165534  5.8741981 10.7969391  3.1370567
 [127]  6.0902198 16.1982528  3.7476915 12.0072700  9.7319234 18.5209045
 [133]  5.6871872  8.7076227  6.7441927  9.3216154  7.7303930  9.7105693
 [139]  8.2906214  7.7883639 11.5068095 11.4665994 19.0000724 10.5615361
 [145] 15.9965420  5.7357035 18.3853278  7.0793466 14.9017024  4.2742728
 [151]  4.1645155  5.4509994  1.7414121  7.9175254 10.7622758  9.0714181
 [157] 11.3803133  4.5366662  5.0061116 13.6606709  5.4485358  2.4799301
 [163]  7.9336243 15.1905210 14.1657041 18.2337095  8.7884802 12.5718619
 [169]  4.8078848  8.0513343 10.5395271  4.0422028  7.0653636 11.5523075
 [175]  6.4405788  6.2714544  4.8892964 13.4240026  5.0966356  6.1549659
 [181] 10.9546812 10.0941380  3.6692967  8.6941693  9.1583211  6.4509845
 [187] 12.9060018  9.4759126 12.1771176  8.7835034  6.7657867  2.8918246
 [193]  6.6059406  4.3622137 21.5438282 11.0818543  9.9049170 13.4835378
 [199] 12.3793078  8.5554250  7.0580806  7.3170383 32.3470325 16.1029099
 [205] 16.8265034 19.9336163  7.3770568  4.1447062  7.1433042  5.0377435
 [211]  8.7377559 10.8409318  5.8350711  7.8265091  9.4124675 32.5844238
 [217]  8.3234940  7.5306036 10.1123222  7.8640442 10.5313916  6.6758573
 [223]  6.5101791  9.1991032  4.8650131  5.3447779  5.6808664 10.2766473
 [229] 15.0553969  3.8922938  4.2154175 11.6698165  7.3469091  1.6159764
 [235] 11.0595126  6.0195538  4.8383743  9.4192424  6.3299752 12.4712763
 [241]  4.7124513 14.6047511  6.1134717  2.9042883  8.0146434 15.7952351
 [247]  8.9118618 13.1183980 11.1064052  5.5322425  7.1224577 14.1935529
 [253]  9.8648228  8.1232363  6.8913461  9.1891988  7.8856572  4.3277456
 [259]  6.8790056  8.4928371  8.1549827 18.2481627  9.5372534  8.8308048
 [265] 17.9248363  6.9545504  8.7584357  5.7623943  4.3294435 20.0903590
 [271] 13.2503602 11.1880084 11.7035008 25.3843816 12.1970860  6.9944934
 [277] 16.8223746 17.5119588  7.1352525 14.3752111  3.9233798  8.0895425
 [283]  7.7573893 20.3054347 17.5296624  9.0155243 10.7021593  6.5590313
 [289] 10.8894874  6.2877724 12.1529711  9.3828024 14.5505436  8.6190778
 [295] 23.9035383  3.0333467  5.7690080 12.1881111  4.9382363  6.5725115
 [301]  5.5257539 12.9017962  7.4842213  4.2589834  6.8854160  9.0255646
 [307]  6.6802848 17.7685076  7.6328296  7.6967627 17.8492436 10.0072185
 [313]  4.7550235 12.2130434  3.6930386 14.0776233  9.0214527  6.0091263
 [319] 10.7733557 10.5649879 12.1024271 12.3321955 13.8309643 17.0478994
 [325] 12.4641941  3.4075795  8.3554481 10.3105866  8.9487500 16.7628262
 [331] 16.3373572  7.2550277 10.4855292  6.3404542  6.6835099  5.3509454
 [337]  4.1271002  7.6339321  8.0498970  9.3208356  9.0064809 12.4541218
 [343]  5.1150352  4.3748963 15.8864180 11.4511849  4.7715271  2.6714222
 [349] 11.5054036  7.7715787  9.7702186 10.7232132  5.4205132  8.0160297
 [355]  9.8620154  6.1760173  4.0902463  3.8342714  8.7970246  5.1050809
 [361]  9.8245456 13.8367947  6.2691031 16.3455652 10.3881685  5.5210216
 [367] 12.5115599  7.9008334  3.9999704 11.6598086  7.1432254  8.8842416
 [373] 13.5094381  5.2606936  8.5909868 22.3472836  4.0277026 10.0425202
 [379]  7.7899035  7.6380292  6.7541406  8.3811826  5.0620173  3.6409827
 [385]  6.5173255  9.2887636 10.4769376 12.1524558 12.2286890  3.2535360
 [391]  8.5838517 12.0480196  6.3568471  8.6825532  6.5915476  4.1560089
 [397] 17.2912181 15.9390212  9.4004491  5.7405662  8.1832713  7.6010020
 [403]  5.9507344  9.6014657  5.5835831  5.0075823 10.9355232  6.1991951
 [409] 10.4551801  9.1003933  7.5171772  4.3972065 13.9907380  2.9076124
 [415] 14.1226005 18.7228310 10.5243798 14.9552835 11.8479770  9.8933707
 [421]  8.9632758  5.8386642  7.0809114 10.6077815  5.7625950 11.7510100
 [427] 12.2025255  5.4809013  4.9958128  3.9978099  8.4647444 13.2157685
 [433] 19.1811086  6.7441828  9.1749512 11.0749367 13.0568483  3.5189710
 [439] 12.1449284 12.0124901  2.5908118 19.3728876 11.1699262  9.2407079
 [445]  8.1218209 10.3196768  8.6311451 12.0615280  9.4622051 11.6798122
 [451]  5.1107642 10.3055443  6.8944763  9.1158694 12.2528559 20.5435471
 [457] 10.0186664 10.6913134  6.1841625 19.2380202 18.2587632  6.4908780
 [463] 13.9002589  2.2460907 13.5323948  9.6108985  9.0194472  6.2928714
 [469]  8.6971001 12.5968719  6.5528912 12.4140896 11.8379023 17.9646392
 [475] 13.6217046  6.7107181 13.9848736 13.9514278  7.3402810  2.2616008
 [481]  8.6801205  8.5742945  7.2775736  6.5194308 18.0525538 11.3403428
 [487]  7.6453451  2.0937119 17.0523291  7.6496500  5.6010851 11.5345320
 [493]  2.2810213 10.0611826 16.8463459  6.9611700  7.6552598 10.3929988
 [499]  9.2972344  7.9042757 11.4684713  3.5394845  8.6672905  6.4795455
 [505]  7.9379315  9.4834288  9.6717500  8.7786420 11.9447681  7.9255289
 [511] 11.6558202  8.7028521  2.8084974  2.0978997  7.2041721 12.5788157
 [517] 14.5553456  6.5193261  9.0512701  6.1912767  6.9635383  3.3087638
 [523] 11.9858904 13.8742658  2.5933285 13.0662318 13.0750210  8.7108791
 [529]  3.3370695  8.4767221 10.0046917 15.3562152 17.1601980  3.9338464
 [535]  8.3327188  5.3072797  6.8801836 14.0173519 20.7015540 17.2467134
 [541]  7.2749295  6.3106533  3.9759266  6.6183306 10.1048335 10.4624778
 [547]  3.2981199  7.5903680 12.2272865 11.1902798  5.4740407  6.3843931
 [553] 10.7661531  2.1174470  6.0852972  8.4783118 17.7827413 12.7888157
 [559]  5.2843460  9.1917493 12.4337800  3.1222090  3.7994848  8.2147912
 [565]  7.1573255  7.6264696 17.3792450  6.8842740  7.4200187  9.5640516
 [571]  4.3281041  9.0206026  3.8832850  4.6653139  6.0725062  5.3508950
 [577] 11.3625893 10.0887581  7.5226635  3.6989882  8.4042384  4.3261269
 [583]  8.5603873  7.5742703 13.9845283  8.9340513 11.8444696  3.9636996
 [589]  8.4475996  7.4491738 16.2582572  2.0646546 16.2030541  5.6296436
 [595]  8.1995101  5.8146926 13.1537111  7.0111282 13.7786016 12.7415403
 [601]  8.3610732  7.5767050  7.7227540  6.5386828  6.4076449 10.6664946
 [607]  6.6132262  1.6325962  8.5759594  3.0133772  2.3659335 24.4093540
 [613]  1.6049028 11.5648330 20.8596510  6.3416639  6.0471645 10.2623915
 [619]  4.1585628  8.6566845  3.2485973  7.7077706 10.6028617  9.8668613
 [625]  1.6636195  7.4926540 11.5904022  3.6141342 12.6285602  5.8384755
 [631]  6.6004389  5.9116027 16.8141944  5.3514768 12.0908539 12.5688128
 [637] 12.7875561  3.0092499  6.9607950  6.5086061 21.3143187 12.3745994
 [643]  7.1830314  9.1360306  8.0863097  8.1671544  3.7159165 14.1687252
 [649]  7.1824706  4.4821515 11.4249454  4.4973164  7.1573211 20.9851618
 [655]  0.6059331 23.1412395  6.9822368  4.7456642 11.7639337  6.6983092
 [661]  7.2253374  3.8711631 14.0033635 12.9072205 12.1913658 10.7761744
 [667] 14.4005287  8.5957602  8.4433403  8.9015908  8.0138154  9.0281870
 [673] 10.2944455 13.0383156  5.6044246 11.6401889 14.7230415  6.2188885
 [679]  8.2853465 15.8096681  3.5643798  7.7373518  6.2775335 13.4468088
 [685]  5.0253633  2.7179809 15.3695651 10.2697552 11.3444747  3.5518588
 [691] 15.6485414 13.7324378  7.5051434 20.1000208  6.3496859  3.9701677
 [697] 20.7129814  9.6438793  8.7213366 14.5091560  5.9548495 12.9145185
 [703]  9.2343390  7.1028556 11.5536568  6.1779111 14.1877756  3.1012824
 [709]  8.5885846  9.6196542 17.3288372  7.3476791 23.0936938 13.2383613
 [715] 10.6228585 11.6156693 12.1130988 14.6706729  6.4436761  7.3625061
 [721]  5.3010667  3.3607697  9.9143301  1.7979030  4.4948021 12.8150399
 [727] 11.2665218 15.4321516  6.7302780 11.5945766  8.7085385  7.1632848
 [733]  5.4047954 13.9539717  3.3884495  7.0482063 16.1122603 13.7853796
 [739]  9.6713288  6.7829441 16.9971112  6.0075453 13.8568783  7.1191635
 [745]  8.2015686  5.8218770  9.5363144 12.9627357  7.2259603  7.3411067
 [751] 18.8926954  3.9957090  9.0857133  6.2937794  8.2931838 15.3247679
 [757] 22.2876519  5.8471006 20.5169593  6.1846936  9.1944588  3.8468259
 [763] 11.0140216  4.7709279 13.9164962 17.5904358  6.1399298  5.2245951
 [769] 12.7303988  3.9028417 20.4958441 12.1443623  4.5019051  8.8495453
 [775]  2.7608073  9.5933421 17.8165480  9.2685253  5.7049863  6.5770911
 [781]  3.9334681 10.8270911 13.1665083  9.6365066  9.9477111  4.4259413
 [787] 13.7880059  6.6279686 10.6476167  5.5098247 11.7520283  9.1597657
 [793] 15.5324916  6.3702834  2.1669290  4.8240329  7.1347055 10.2160298
 [799] 12.7117586 13.6177076  8.8020567  8.4288544  6.6794493  8.3144134
 [805]  2.8593302 12.3767785  7.1002649  5.6793346  8.2899112  8.3489337
 [811] 12.4586523 11.7544978  9.3120640 18.3185333  4.2261873 11.7423594
 [817]  9.9554720 11.8042307  6.0690391 11.3703388 11.0782354  2.9020924
 [823]  5.4494356 11.9706619 11.4698029  8.4770688  7.8828480 11.8078845
 [829]  5.9118195  7.4156833  5.4225249 13.4087473  7.5381485 10.8974713
 [835]  1.6504768 13.9980130 24.4214680 18.2803324  4.4029316  6.0194320
 [841] 20.5686169  8.0280701 16.3298965  8.8624558  7.7790309  3.6930722
 [847]  6.1986857  5.2439412 22.0704043  1.3139479 10.2311239 14.2446739
 [853]  8.8797671 19.4215395 15.7112103  6.5106262 19.4092168 10.3312216
 [859]  6.1140246  4.5135230  3.0063222  3.3277500  8.4548020 10.7887937
 [865]  7.8795399  3.6264514  6.1781022 11.8634615  4.7237736 16.3719598
 [871]  9.3321775  4.2481863  7.9946790  4.3279750  5.2145353  9.6443120
 [877] 10.5533700  8.1340944 13.7737860 13.8510476 13.9491223  9.8721802
 [883] 10.0278184  5.4743930  9.5493486  9.7937163  9.8849076 12.1183921
 [889]  7.7814084  8.7437509 11.3767480  6.4308905  7.7389945 10.5766642
 [895]  7.5441955  5.3088624  3.8592585  6.0005219 13.2199759 14.5911695
 [901]  9.9962570  1.4821030  5.6481541 18.9020521  4.1888131 13.3407412
 [907]  5.5196516  3.7573608  9.8328932 11.1767972  9.8395796  9.7342390
 [913] 12.7989857  9.5901934 20.2240119 12.6771878  6.0280300 10.0512225
 [919]  3.9024664 15.6731116  7.2973983 16.9519294  3.7376826 10.6113597
 [925]  8.7726916 12.7236263 19.9662052  3.8925703  3.7240267  6.7638553
 [931]  6.3186175  7.5066788  9.7987083 11.3064243 11.8637175  8.5898523
 [937]  9.0808311 15.3669570  5.9115419  8.1406431  3.7721399  1.7733324
 [943]  8.7774031  9.2075208 11.2097129  4.8493360  8.7007832  8.6943463
 [949]  7.9947106  7.8561601 18.2912144  3.5898805 15.5172252  5.2895676
 [955]  7.7324405  4.7225459 11.9174548  5.1073452  5.5059473 13.7498658
 [961]  6.4909895  6.5708642 15.6249014  8.1922866  6.9159048 18.0813158
 [967] 12.7533258 15.1425684  3.2501316 10.4476244  8.4253622  9.8446063
 [973]  9.6277656 11.3644658  9.3899097  6.2728976 16.6263386  8.0202466
 [979] 13.2379079  7.1825047 11.6335633 10.5375312  7.9743899  4.2550108
 [985]  6.9987085 12.8593978  5.3201701 10.7395727  5.6707109  9.3420701
 [991]  6.8629744  3.8463538 10.5184047  5.8842531  6.5974433  6.0120174
 [997]  3.6460291 12.8781674 10.0608000 13.1494892

$summary
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.6059  6.1139  8.6737  9.2693 11.7513 32.5844 

$sd
[1] 4.478673

$fun
[1] "Chi-sq"

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mychisim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("myci")
> ### * myci
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: myci
> ### Title: 1 Sample Confidence Interval
> ### Aliases: myci
> 
> ### ** Examples
> 
> myci(x=rnorm(30,mean=10,sd=12),alpha = .05)
[1] "6.84862938782741  -  15.1303666968332"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("myci", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mycltp")
> ### * mycltp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mycltp
> ### Title: CLT Poisson Distribution
> ### Aliases: mycltp
> 
> ### ** Examples
> 
> mycltp(10,10000,20)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mycltp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mymlbeta")
> ### * mymlbeta
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mymlbeta
> ### Title: Maximum Likelihood Estimate of a Beta Distribution
> ### Aliases: mymlbeta
> 
> ### ** Examples
> 
> sam= rbeta(30,shape1=3,shape2=4)
> mymlbeta(x=sam,alpha=seq(1,8,length=100),beta=seq(2,8,length=100),lwd=2,labcex=1)
$x
 [1] 0.30163682 0.46791713 0.26234368 0.49972320 0.26512933 0.53462325
 [7] 0.59076559 0.36514644 0.76053611 0.51300544 0.30263862 0.06789113
[13] 0.67738423 0.41907484 0.42514349 0.63696388 0.60940788 0.55836963
[19] 0.63138357 0.60061672 0.44444652 0.09005849 0.56417197 0.41671719
[25] 0.39588022 0.15645041 0.33052904 0.51921367 0.72837363 0.40692785

$coord
     row col
[1,]  29  29

$maxl
[1] 13753.02

$maxalpha
[1] 2.979798

$maxbeta
[1] 3.69697

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mymlbeta", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("myncurve")
> ### * myncurve
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: myncurve
> ### Title: myncurve
> ### Aliases: myncurve
> 
> ### ** Examples
> 
> myncurve(mu=2,sigma=5,a=6)
[[1]]
[1] 0.7881

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("myncurve", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mypvalue")
> ### * mypvalue
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mypvalue
> ### Title: Plot of a one sample t-test
> ### Aliases: mypvalue
> 
> ### ** Examples
> 
> t0 <- qt(0.05/2,df=20)
>           mypvalue(t0,max,n=21,alpha=0.05)
Error in neg(max) : could not find function "neg"
Calls: mypvalue -> curve
Execution halted
